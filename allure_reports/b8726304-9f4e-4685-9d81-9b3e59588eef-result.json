{"name": "test_main_page_footer", "status": "failed", "statusDetails": {"message": "AssertionError: The page loaded more than 60 seconds!", "trace": "web_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38a34df82361fae87ac77325a60250b0\")>\n\n    @allure.story('Тест для проверки главной страницы')\n    @allure.feature('Тест для проверки работоспособности футера')\n    def test_main_page_footer(web_browser):\n        \"\"\"Этот тест проверяет работоспособность футера\"\"\"\n    \n>       page = MainPage(web_browser)\n\ntests\\test_main_page.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlocators\\locators_main_page.py:14: in __init__\n    super().__init__(web_driver, url)\npage\\base_page.py:15: in __init__\n    self.get(url)\npage\\base_page.py:34: in get\n    self.wait_page_loaded()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <locators.locators_main_page.MainPage object at 0x0000021FBACE3160>\ntimeout = 60, check_js_complete = True, check_page_changes = False\ncheck_images = False, wait_for_element = None, wait_for_xpath_to_disappear = ''\nsleep_time = 2\n\n    def wait_page_loaded(self, timeout=60, check_js_complete=True,\n                         check_page_changes=False, check_images=False,\n                         wait_for_element=None,\n                         wait_for_xpath_to_disappear='',\n                         sleep_time=2):\n        \"\"\" Эта функция ждет, пока страница не будет полностью загружена.\n            Мы используем много разных способов определить, загружена страница или нет.:\n            1) Проверить статус JS\n            2) Проверить модификацию в исходном коде страницы\n            3) Убедитесь, что все изображения загружены полностью\n               (Примечание: по умолчанию эта проверка отключена)\n            4) Убедиться, что ожидаемые элементы, представленные на странице\n        \"\"\"\n    \n        page_loaded = False\n        double_check = False\n        k = 0\n    \n        if sleep_time:\n            time.sleep(sleep_time)\n    \n        # Получить исходный код страницы для отслеживания изменений в HTML:\n        source = ''\n        try:\n            source = self._web_driver.page_source\n        except:\n            pass\n    \n        # Подождать, пока страница загрузится (и прокрутить ее, чтобы убедиться, что все объекты будут загружены):\n        while not page_loaded:\n            time.sleep(0.5)\n            k += 1\n    \n            if check_js_complete:\n                # Прокрутить вниз и подождите, пока страница загрузится:\n                try:\n                    self._web_driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')\n                    page_loaded = self._web_driver.execute_script(\"return document.readyState == 'complete';\")\n                except Exception as e:\n                    pass\n    \n            if page_loaded and check_page_changes:\n                # Проверьть не изменился ли источник страницы\n                new_source = ''\n                try:\n                    new_source = self._web_driver.page_source\n                except:\n                    pass\n    \n                page_loaded = new_source == source\n                source = new_source\n    \n            # Подождить когда какой-то элемент исчезнет:\n            if page_loaded and wait_for_xpath_to_disappear:\n                bad_element = None\n    \n                try:\n                    bad_element = WebDriverWait(self._web_driver, 0.1).until(\n                        EC.presence_of_element_located((By.XPATH, wait_for_xpath_to_disappear))\n                    )\n                except:\n                    pass  # Игнорировать ошибки тайм-аута\n    \n                page_loaded = not bad_element\n    \n            if page_loaded and wait_for_element:\n                try:\n                    page_loaded = WebDriverWait(self._web_driver, 0.1).until(\n                        EC.element_to_be_clickable(wait_for_element._locator)\n                    )\n                except:\n                    pass  # Игнорировать ошибки тайм-аута\n    \n>           assert k < timeout, 'The page loaded more than {0} seconds!'.format(timeout)\nE           AssertionError: The page loaded more than 60 seconds!\n\npage\\base_page.py:204: AssertionError"}, "description": "Этот тест проверяет работоспособность футера", "start": 1719341501539, "stop": 1719341535308, "uuid": "faf69514-56ef-4203-94c6-41905b93e3a4", "historyId": "a266d1b1ff1ae69e9d956de8f58513df", "testCaseId": "51e42af667277f54e54ed930d0121a14", "fullName": "Этот тест проверяет работоспособность футера#Этот тест проверяет работоспособность футера", "labels": [{"name": "story", "value": "Тест для проверки главной страницы"}, {"name": "feature", "value": "Тест для проверки работоспособности футера"}, {"name": "suite", "value": "Этот тест проверяет работоспособность футера"}, {"name": "host", "value": "DESKTOP-N1HF4R3"}, {"name": "thread", "value": "20472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Этот тест проверяет работоспособность футера"}]}